version: '3.8'

services:
  # PostgreSQL database for storing backfill state
  postgres:
    image: postgres:15-alpine
    container_name: relay-postgres
    environment:
      POSTGRES_USER: relay
      POSTGRES_PASSWORD: relay
      POSTGRES_DB: backfiller_relay
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      # Persist database data
      - postgres_data:/var/lib/postgresql/data
      # Optional: Add initialization scripts
      # - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U relay -d backfiller_relay"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - relay-network

  # The relay service
  relay:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tradr-relay
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Database configuration
      DATABASE_DSN: "postgres://relay:relay@postgres:5432/backfiller_relay?sslmode=disable"
      
      # Firehose configuration
      FIREHOSE_HOST: "wss://bsky.network"
      NSID_FILTER: "app.bsky."
      
      # Ingester addresses (update these to match your Ingester services)
      INGESTER_ADDRESSES: "host.docker.internal:50052"
      
      # Service configuration
      RELAY_NAME: "tradr-relay-dev"
      LOG_LEVEL: "debug"
      
      # Performance tuning
      PARALLEL_BACKFILLS: "5"
      
      # Ports
      GRPC_PORT: "50051"
      METRICS_PORT: "9090"
    ports:
      # gRPC management port
      - "50051:50051"
      # Prometheus metrics port
      - "9090:9090"
    volumes:
      # Mount config file for easy updates
      - ./config/config.yaml:/app/config/config.yaml:ro
      # Optional: Mount for debugging
      # - ./logs:/app/logs
    networks:
      - relay-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: relay-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - relay-network
    depends_on:
      - relay

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: relay-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      # Optional: Add dashboards
      # - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      # - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - relay-network
    depends_on:
      - prometheus

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: relay-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - relay-network
    depends_on:
      - postgres

networks:
  relay-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local