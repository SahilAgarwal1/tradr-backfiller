// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v6.32.0
// source: proto/ingester.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CommitRequest represents a commit from the firehose or backfill
// This matches the structure of com.atproto.sync.subscribeRepos#commit
type CommitRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// DID of the repository this commit belongs to
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// Revision string from the commit
	Rev string `protobuf:"bytes,2,opt,name=rev,proto3" json:"rev,omitempty"`
	// Previous revision (null for first commit)
	Since *string `protobuf:"bytes,3,opt,name=since,proto3,oneof" json:"since,omitempty"`
	// The operations in this commit
	Ops []*RepoOp `protobuf:"bytes,4,rep,name=ops,proto3" json:"ops,omitempty"`
	// CAR file blocks containing the actual record data
	Blocks []byte `protobuf:"bytes,5,opt,name=blocks,proto3" json:"blocks,omitempty"`
	// Sequence number from firehose for ordering
	Seq int64 `protobuf:"varint,6,opt,name=seq,proto3" json:"seq,omitempty"`
	// ISO 8601 timestamp when this commit was created
	Time string `protobuf:"bytes,7,opt,name=time,proto3" json:"time,omitempty"`
	// Indicates if this commit was too big to include ops (requires separate fetch)
	TooBig bool `protobuf:"varint,8,opt,name=too_big,json=tooBig,proto3" json:"too_big,omitempty"`
	// Previous data CID for verification (optional)
	PrevData *string `protobuf:"bytes,9,opt,name=prev_data,json=prevData,proto3,oneof" json:"prev_data,omitempty"`
	// Commit CID
	Commit string `protobuf:"bytes,10,opt,name=commit,proto3" json:"commit,omitempty"`
	// Blob references in this commit
	Blobs         []string `protobuf:"bytes,11,rep,name=blobs,proto3" json:"blobs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitRequest) Reset() {
	*x = CommitRequest{}
	mi := &file_proto_ingester_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitRequest) ProtoMessage() {}

func (x *CommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ingester_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitRequest.ProtoReflect.Descriptor instead.
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return file_proto_ingester_proto_rawDescGZIP(), []int{0}
}

func (x *CommitRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *CommitRequest) GetRev() string {
	if x != nil {
		return x.Rev
	}
	return ""
}

func (x *CommitRequest) GetSince() string {
	if x != nil && x.Since != nil {
		return *x.Since
	}
	return ""
}

func (x *CommitRequest) GetOps() []*RepoOp {
	if x != nil {
		return x.Ops
	}
	return nil
}

func (x *CommitRequest) GetBlocks() []byte {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *CommitRequest) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *CommitRequest) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *CommitRequest) GetTooBig() bool {
	if x != nil {
		return x.TooBig
	}
	return false
}

func (x *CommitRequest) GetPrevData() string {
	if x != nil && x.PrevData != nil {
		return *x.PrevData
	}
	return ""
}

func (x *CommitRequest) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *CommitRequest) GetBlobs() []string {
	if x != nil {
		return x.Blobs
	}
	return nil
}

// RepoOp represents a single operation within a commit
// This matches com.atproto.sync.subscribeRepos#repoOp
type RepoOp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Action type: "create", "update", or "delete"
	Action string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	// Record path (e.g., "app.bsky.feed.post/3k2yihcrp6f2c")
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// CID of the record (null for deletes)
	Cid *string `protobuf:"bytes,3,opt,name=cid,proto3,oneof" json:"cid,omitempty"`
	// Previous CID (for updates and deletes)
	Prev          *string `protobuf:"bytes,4,opt,name=prev,proto3,oneof" json:"prev,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepoOp) Reset() {
	*x = RepoOp{}
	mi := &file_proto_ingester_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepoOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoOp) ProtoMessage() {}

func (x *RepoOp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ingester_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoOp.ProtoReflect.Descriptor instead.
func (*RepoOp) Descriptor() ([]byte, []int) {
	return file_proto_ingester_proto_rawDescGZIP(), []int{1}
}

func (x *RepoOp) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *RepoOp) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RepoOp) GetCid() string {
	if x != nil && x.Cid != nil {
		return *x.Cid
	}
	return ""
}

func (x *RepoOp) GetPrev() string {
	if x != nil && x.Prev != nil {
		return *x.Prev
	}
	return ""
}

// CommitResponse contains the result of processing a commit
type CommitResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the commit was successfully processed
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Error message if the commit failed
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Sequence number to acknowledge specific commit
	Seq int64 `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
	// Processing timestamp for metrics
	ProcessedAt   string `protobuf:"bytes,4,opt,name=processed_at,json=processedAt,proto3" json:"processed_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitResponse) Reset() {
	*x = CommitResponse{}
	mi := &file_proto_ingester_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitResponse) ProtoMessage() {}

func (x *CommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ingester_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitResponse.ProtoReflect.Descriptor instead.
func (*CommitResponse) Descriptor() ([]byte, []int) {
	return file_proto_ingester_proto_rawDescGZIP(), []int{2}
}

func (x *CommitResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CommitResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *CommitResponse) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *CommitResponse) GetProcessedAt() string {
	if x != nil {
		return x.ProcessedAt
	}
	return ""
}

// HealthCheckRequest for checking ingester status
type HealthCheckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	mi := &file_proto_ingester_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ingester_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_proto_ingester_proto_rawDescGZIP(), []int{3}
}

// HealthCheckResponse indicates the health status of the ingester
type HealthCheckResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the ingester is healthy and ready
	Healthy bool `protobuf:"varint,1,opt,name=healthy,proto3" json:"healthy,omitempty"`
	// Human-readable status message
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Current backlog size (if applicable)
	Backlog       int64 `protobuf:"varint,3,opt,name=backlog,proto3" json:"backlog,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	mi := &file_proto_ingester_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ingester_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_proto_ingester_proto_rawDescGZIP(), []int{4}
}

func (x *HealthCheckResponse) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

func (x *HealthCheckResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HealthCheckResponse) GetBacklog() int64 {
	if x != nil {
		return x.Backlog
	}
	return 0
}

// IdentityEvent represents a change to an account's identity
type IdentityEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Did           string                 `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	Handle        *string                `protobuf:"bytes,2,opt,name=handle,proto3,oneof" json:"handle,omitempty"`
	Seq           int64                  `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
	Time          string                 `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IdentityEvent) Reset() {
	*x = IdentityEvent{}
	mi := &file_proto_ingester_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentityEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityEvent) ProtoMessage() {}

func (x *IdentityEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ingester_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityEvent.ProtoReflect.Descriptor instead.
func (*IdentityEvent) Descriptor() ([]byte, []int) {
	return file_proto_ingester_proto_rawDescGZIP(), []int{5}
}

func (x *IdentityEvent) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *IdentityEvent) GetHandle() string {
	if x != nil && x.Handle != nil {
		return *x.Handle
	}
	return ""
}

func (x *IdentityEvent) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *IdentityEvent) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

// AccountEvent represents a change to account status
type AccountEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Did           string                 `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	Active        bool                   `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	Status        *string                `protobuf:"bytes,3,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Seq           int64                  `protobuf:"varint,4,opt,name=seq,proto3" json:"seq,omitempty"`
	Time          string                 `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountEvent) Reset() {
	*x = AccountEvent{}
	mi := &file_proto_ingester_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountEvent) ProtoMessage() {}

func (x *AccountEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ingester_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountEvent.ProtoReflect.Descriptor instead.
func (*AccountEvent) Descriptor() ([]byte, []int) {
	return file_proto_ingester_proto_rawDescGZIP(), []int{6}
}

func (x *AccountEvent) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *AccountEvent) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *AccountEvent) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *AccountEvent) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *AccountEvent) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

// HandleEvent represents a handle change
type HandleEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Did           string                 `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	Handle        string                 `protobuf:"bytes,2,opt,name=handle,proto3" json:"handle,omitempty"`
	Seq           int64                  `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
	Time          string                 `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HandleEvent) Reset() {
	*x = HandleEvent{}
	mi := &file_proto_ingester_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandleEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleEvent) ProtoMessage() {}

func (x *HandleEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ingester_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleEvent.ProtoReflect.Descriptor instead.
func (*HandleEvent) Descriptor() ([]byte, []int) {
	return file_proto_ingester_proto_rawDescGZIP(), []int{7}
}

func (x *HandleEvent) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *HandleEvent) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *HandleEvent) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *HandleEvent) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

// TombstoneEvent represents repo deletion
type TombstoneEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Did           string                 `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	Seq           int64                  `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	Time          string                 `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TombstoneEvent) Reset() {
	*x = TombstoneEvent{}
	mi := &file_proto_ingester_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TombstoneEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TombstoneEvent) ProtoMessage() {}

func (x *TombstoneEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ingester_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TombstoneEvent.ProtoReflect.Descriptor instead.
func (*TombstoneEvent) Descriptor() ([]byte, []int) {
	return file_proto_ingester_proto_rawDescGZIP(), []int{8}
}

func (x *TombstoneEvent) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *TombstoneEvent) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *TombstoneEvent) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

// MigrateEvent represents repo migration
type MigrateEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Did           string                 `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	MigrateTo     string                 `protobuf:"bytes,2,opt,name=migrate_to,json=migrateTo,proto3" json:"migrate_to,omitempty"`
	Seq           int64                  `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
	Time          string                 `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MigrateEvent) Reset() {
	*x = MigrateEvent{}
	mi := &file_proto_ingester_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MigrateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateEvent) ProtoMessage() {}

func (x *MigrateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ingester_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateEvent.ProtoReflect.Descriptor instead.
func (*MigrateEvent) Descriptor() ([]byte, []int) {
	return file_proto_ingester_proto_rawDescGZIP(), []int{9}
}

func (x *MigrateEvent) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *MigrateEvent) GetMigrateTo() string {
	if x != nil {
		return x.MigrateTo
	}
	return ""
}

func (x *MigrateEvent) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *MigrateEvent) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

// InfoEvent represents informational messages from the relay
type InfoEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Message       *string                `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InfoEvent) Reset() {
	*x = InfoEvent{}
	mi := &file_proto_ingester_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InfoEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoEvent) ProtoMessage() {}

func (x *InfoEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ingester_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoEvent.ProtoReflect.Descriptor instead.
func (*InfoEvent) Descriptor() ([]byte, []int) {
	return file_proto_ingester_proto_rawDescGZIP(), []int{10}
}

func (x *InfoEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InfoEvent) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

// EventWrapper for different event types if we want to support all firehose events
type FirehoseEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*FirehoseEvent_Commit
	//	*FirehoseEvent_Identity
	//	*FirehoseEvent_Account
	//	*FirehoseEvent_Handle
	//	*FirehoseEvent_Tombstone
	//	*FirehoseEvent_Migrate
	//	*FirehoseEvent_Info
	Event         isFirehoseEvent_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FirehoseEvent) Reset() {
	*x = FirehoseEvent{}
	mi := &file_proto_ingester_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FirehoseEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirehoseEvent) ProtoMessage() {}

func (x *FirehoseEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ingester_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirehoseEvent.ProtoReflect.Descriptor instead.
func (*FirehoseEvent) Descriptor() ([]byte, []int) {
	return file_proto_ingester_proto_rawDescGZIP(), []int{11}
}

func (x *FirehoseEvent) GetEvent() isFirehoseEvent_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *FirehoseEvent) GetCommit() *CommitRequest {
	if x != nil {
		if x, ok := x.Event.(*FirehoseEvent_Commit); ok {
			return x.Commit
		}
	}
	return nil
}

func (x *FirehoseEvent) GetIdentity() *IdentityEvent {
	if x != nil {
		if x, ok := x.Event.(*FirehoseEvent_Identity); ok {
			return x.Identity
		}
	}
	return nil
}

func (x *FirehoseEvent) GetAccount() *AccountEvent {
	if x != nil {
		if x, ok := x.Event.(*FirehoseEvent_Account); ok {
			return x.Account
		}
	}
	return nil
}

func (x *FirehoseEvent) GetHandle() *HandleEvent {
	if x != nil {
		if x, ok := x.Event.(*FirehoseEvent_Handle); ok {
			return x.Handle
		}
	}
	return nil
}

func (x *FirehoseEvent) GetTombstone() *TombstoneEvent {
	if x != nil {
		if x, ok := x.Event.(*FirehoseEvent_Tombstone); ok {
			return x.Tombstone
		}
	}
	return nil
}

func (x *FirehoseEvent) GetMigrate() *MigrateEvent {
	if x != nil {
		if x, ok := x.Event.(*FirehoseEvent_Migrate); ok {
			return x.Migrate
		}
	}
	return nil
}

func (x *FirehoseEvent) GetInfo() *InfoEvent {
	if x != nil {
		if x, ok := x.Event.(*FirehoseEvent_Info); ok {
			return x.Info
		}
	}
	return nil
}

type isFirehoseEvent_Event interface {
	isFirehoseEvent_Event()
}

type FirehoseEvent_Commit struct {
	Commit *CommitRequest `protobuf:"bytes,1,opt,name=commit,proto3,oneof"`
}

type FirehoseEvent_Identity struct {
	Identity *IdentityEvent `protobuf:"bytes,2,opt,name=identity,proto3,oneof"`
}

type FirehoseEvent_Account struct {
	Account *AccountEvent `protobuf:"bytes,3,opt,name=account,proto3,oneof"`
}

type FirehoseEvent_Handle struct {
	Handle *HandleEvent `protobuf:"bytes,4,opt,name=handle,proto3,oneof"`
}

type FirehoseEvent_Tombstone struct {
	Tombstone *TombstoneEvent `protobuf:"bytes,5,opt,name=tombstone,proto3,oneof"`
}

type FirehoseEvent_Migrate struct {
	Migrate *MigrateEvent `protobuf:"bytes,6,opt,name=migrate,proto3,oneof"`
}

type FirehoseEvent_Info struct {
	Info *InfoEvent `protobuf:"bytes,7,opt,name=info,proto3,oneof"`
}

func (*FirehoseEvent_Commit) isFirehoseEvent_Event() {}

func (*FirehoseEvent_Identity) isFirehoseEvent_Event() {}

func (*FirehoseEvent_Account) isFirehoseEvent_Event() {}

func (*FirehoseEvent_Handle) isFirehoseEvent_Event() {}

func (*FirehoseEvent_Tombstone) isFirehoseEvent_Event() {}

func (*FirehoseEvent_Migrate) isFirehoseEvent_Event() {}

func (*FirehoseEvent_Info) isFirehoseEvent_Event() {}

var File_proto_ingester_proto protoreflect.FileDescriptor

const file_proto_ingester_proto_rawDesc = "" +
	"\n" +
	"\x14proto/ingester.proto\x12\vingester.v1\"\xb6\x02\n" +
	"\rCommitRequest\x12\x12\n" +
	"\x04repo\x18\x01 \x01(\tR\x04repo\x12\x10\n" +
	"\x03rev\x18\x02 \x01(\tR\x03rev\x12\x19\n" +
	"\x05since\x18\x03 \x01(\tH\x00R\x05since\x88\x01\x01\x12%\n" +
	"\x03ops\x18\x04 \x03(\v2\x13.ingester.v1.RepoOpR\x03ops\x12\x16\n" +
	"\x06blocks\x18\x05 \x01(\fR\x06blocks\x12\x10\n" +
	"\x03seq\x18\x06 \x01(\x03R\x03seq\x12\x12\n" +
	"\x04time\x18\a \x01(\tR\x04time\x12\x17\n" +
	"\atoo_big\x18\b \x01(\bR\x06tooBig\x12 \n" +
	"\tprev_data\x18\t \x01(\tH\x01R\bprevData\x88\x01\x01\x12\x16\n" +
	"\x06commit\x18\n" +
	" \x01(\tR\x06commit\x12\x14\n" +
	"\x05blobs\x18\v \x03(\tR\x05blobsB\b\n" +
	"\x06_sinceB\f\n" +
	"\n" +
	"_prev_data\"u\n" +
	"\x06RepoOp\x12\x16\n" +
	"\x06action\x18\x01 \x01(\tR\x06action\x12\x12\n" +
	"\x04path\x18\x02 \x01(\tR\x04path\x12\x15\n" +
	"\x03cid\x18\x03 \x01(\tH\x00R\x03cid\x88\x01\x01\x12\x17\n" +
	"\x04prev\x18\x04 \x01(\tH\x01R\x04prev\x88\x01\x01B\x06\n" +
	"\x04_cidB\a\n" +
	"\x05_prev\"u\n" +
	"\x0eCommitResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x12\x10\n" +
	"\x03seq\x18\x03 \x01(\x03R\x03seq\x12!\n" +
	"\fprocessed_at\x18\x04 \x01(\tR\vprocessedAt\"\x14\n" +
	"\x12HealthCheckRequest\"a\n" +
	"\x13HealthCheckResponse\x12\x18\n" +
	"\ahealthy\x18\x01 \x01(\bR\ahealthy\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x18\n" +
	"\abacklog\x18\x03 \x01(\x03R\abacklog\"o\n" +
	"\rIdentityEvent\x12\x10\n" +
	"\x03did\x18\x01 \x01(\tR\x03did\x12\x1b\n" +
	"\x06handle\x18\x02 \x01(\tH\x00R\x06handle\x88\x01\x01\x12\x10\n" +
	"\x03seq\x18\x03 \x01(\x03R\x03seq\x12\x12\n" +
	"\x04time\x18\x04 \x01(\tR\x04timeB\t\n" +
	"\a_handle\"\x86\x01\n" +
	"\fAccountEvent\x12\x10\n" +
	"\x03did\x18\x01 \x01(\tR\x03did\x12\x16\n" +
	"\x06active\x18\x02 \x01(\bR\x06active\x12\x1b\n" +
	"\x06status\x18\x03 \x01(\tH\x00R\x06status\x88\x01\x01\x12\x10\n" +
	"\x03seq\x18\x04 \x01(\x03R\x03seq\x12\x12\n" +
	"\x04time\x18\x05 \x01(\tR\x04timeB\t\n" +
	"\a_status\"]\n" +
	"\vHandleEvent\x12\x10\n" +
	"\x03did\x18\x01 \x01(\tR\x03did\x12\x16\n" +
	"\x06handle\x18\x02 \x01(\tR\x06handle\x12\x10\n" +
	"\x03seq\x18\x03 \x01(\x03R\x03seq\x12\x12\n" +
	"\x04time\x18\x04 \x01(\tR\x04time\"H\n" +
	"\x0eTombstoneEvent\x12\x10\n" +
	"\x03did\x18\x01 \x01(\tR\x03did\x12\x10\n" +
	"\x03seq\x18\x02 \x01(\x03R\x03seq\x12\x12\n" +
	"\x04time\x18\x03 \x01(\tR\x04time\"e\n" +
	"\fMigrateEvent\x12\x10\n" +
	"\x03did\x18\x01 \x01(\tR\x03did\x12\x1d\n" +
	"\n" +
	"migrate_to\x18\x02 \x01(\tR\tmigrateTo\x12\x10\n" +
	"\x03seq\x18\x03 \x01(\x03R\x03seq\x12\x12\n" +
	"\x04time\x18\x04 \x01(\tR\x04time\"J\n" +
	"\tInfoEvent\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1d\n" +
	"\amessage\x18\x02 \x01(\tH\x00R\amessage\x88\x01\x01B\n" +
	"\n" +
	"\b_message\"\x95\x03\n" +
	"\rFirehoseEvent\x124\n" +
	"\x06commit\x18\x01 \x01(\v2\x1a.ingester.v1.CommitRequestH\x00R\x06commit\x128\n" +
	"\bidentity\x18\x02 \x01(\v2\x1a.ingester.v1.IdentityEventH\x00R\bidentity\x125\n" +
	"\aaccount\x18\x03 \x01(\v2\x19.ingester.v1.AccountEventH\x00R\aaccount\x122\n" +
	"\x06handle\x18\x04 \x01(\v2\x18.ingester.v1.HandleEventH\x00R\x06handle\x12;\n" +
	"\ttombstone\x18\x05 \x01(\v2\x1b.ingester.v1.TombstoneEventH\x00R\ttombstone\x125\n" +
	"\amigrate\x18\x06 \x01(\v2\x19.ingester.v1.MigrateEventH\x00R\amigrate\x12,\n" +
	"\x04info\x18\a \x01(\v2\x16.ingester.v1.InfoEventH\x00R\x04infoB\a\n" +
	"\x05event2\xb1\x01\n" +
	"\x0fIngesterService\x12L\n" +
	"\rStreamCommits\x12\x1a.ingester.v1.CommitRequest\x1a\x1b.ingester.v1.CommitResponse(\x010\x01\x12P\n" +
	"\vHealthCheck\x12\x1f.ingester.v1.HealthCheckRequest\x1a .ingester.v1.HealthCheckResponseB$Z\"tradr-backfiller-relay/proto;protob\x06proto3"

var (
	file_proto_ingester_proto_rawDescOnce sync.Once
	file_proto_ingester_proto_rawDescData []byte
)

func file_proto_ingester_proto_rawDescGZIP() []byte {
	file_proto_ingester_proto_rawDescOnce.Do(func() {
		file_proto_ingester_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_ingester_proto_rawDesc), len(file_proto_ingester_proto_rawDesc)))
	})
	return file_proto_ingester_proto_rawDescData
}

var file_proto_ingester_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_proto_ingester_proto_goTypes = []any{
	(*CommitRequest)(nil),       // 0: ingester.v1.CommitRequest
	(*RepoOp)(nil),              // 1: ingester.v1.RepoOp
	(*CommitResponse)(nil),      // 2: ingester.v1.CommitResponse
	(*HealthCheckRequest)(nil),  // 3: ingester.v1.HealthCheckRequest
	(*HealthCheckResponse)(nil), // 4: ingester.v1.HealthCheckResponse
	(*IdentityEvent)(nil),       // 5: ingester.v1.IdentityEvent
	(*AccountEvent)(nil),        // 6: ingester.v1.AccountEvent
	(*HandleEvent)(nil),         // 7: ingester.v1.HandleEvent
	(*TombstoneEvent)(nil),      // 8: ingester.v1.TombstoneEvent
	(*MigrateEvent)(nil),        // 9: ingester.v1.MigrateEvent
	(*InfoEvent)(nil),           // 10: ingester.v1.InfoEvent
	(*FirehoseEvent)(nil),       // 11: ingester.v1.FirehoseEvent
}
var file_proto_ingester_proto_depIdxs = []int32{
	1,  // 0: ingester.v1.CommitRequest.ops:type_name -> ingester.v1.RepoOp
	0,  // 1: ingester.v1.FirehoseEvent.commit:type_name -> ingester.v1.CommitRequest
	5,  // 2: ingester.v1.FirehoseEvent.identity:type_name -> ingester.v1.IdentityEvent
	6,  // 3: ingester.v1.FirehoseEvent.account:type_name -> ingester.v1.AccountEvent
	7,  // 4: ingester.v1.FirehoseEvent.handle:type_name -> ingester.v1.HandleEvent
	8,  // 5: ingester.v1.FirehoseEvent.tombstone:type_name -> ingester.v1.TombstoneEvent
	9,  // 6: ingester.v1.FirehoseEvent.migrate:type_name -> ingester.v1.MigrateEvent
	10, // 7: ingester.v1.FirehoseEvent.info:type_name -> ingester.v1.InfoEvent
	0,  // 8: ingester.v1.IngesterService.StreamCommits:input_type -> ingester.v1.CommitRequest
	3,  // 9: ingester.v1.IngesterService.HealthCheck:input_type -> ingester.v1.HealthCheckRequest
	2,  // 10: ingester.v1.IngesterService.StreamCommits:output_type -> ingester.v1.CommitResponse
	4,  // 11: ingester.v1.IngesterService.HealthCheck:output_type -> ingester.v1.HealthCheckResponse
	10, // [10:12] is the sub-list for method output_type
	8,  // [8:10] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_proto_ingester_proto_init() }
func file_proto_ingester_proto_init() {
	if File_proto_ingester_proto != nil {
		return
	}
	file_proto_ingester_proto_msgTypes[0].OneofWrappers = []any{}
	file_proto_ingester_proto_msgTypes[1].OneofWrappers = []any{}
	file_proto_ingester_proto_msgTypes[5].OneofWrappers = []any{}
	file_proto_ingester_proto_msgTypes[6].OneofWrappers = []any{}
	file_proto_ingester_proto_msgTypes[10].OneofWrappers = []any{}
	file_proto_ingester_proto_msgTypes[11].OneofWrappers = []any{
		(*FirehoseEvent_Commit)(nil),
		(*FirehoseEvent_Identity)(nil),
		(*FirehoseEvent_Account)(nil),
		(*FirehoseEvent_Handle)(nil),
		(*FirehoseEvent_Tombstone)(nil),
		(*FirehoseEvent_Migrate)(nil),
		(*FirehoseEvent_Info)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_ingester_proto_rawDesc), len(file_proto_ingester_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_ingester_proto_goTypes,
		DependencyIndexes: file_proto_ingester_proto_depIdxs,
		MessageInfos:      file_proto_ingester_proto_msgTypes,
	}.Build()
	File_proto_ingester_proto = out.File
	file_proto_ingester_proto_goTypes = nil
	file_proto_ingester_proto_depIdxs = nil
}
