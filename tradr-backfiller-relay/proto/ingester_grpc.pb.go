// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: proto/ingester.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IngesterService_StreamOperations_FullMethodName = "/ingester.v1.IngesterService/StreamOperations"
	IngesterService_HealthCheck_FullMethodName      = "/ingester.v1.IngesterService/HealthCheck"
)

// IngesterServiceClient is the client API for IngesterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// IngesterService handles streaming operations from the backfiller relay
// This provides filtered, pre-processed operations rather than raw commits
type IngesterServiceClient interface {
	// StreamOperations creates a bidirectional stream for continuous operation processing
	// The relay sends individual operations, the ingester responds with acknowledgments
	StreamOperations(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[OperationRequest, OperationResponse], error)
	// HealthCheck verifies the ingester is running and ready to accept operations
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type ingesterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIngesterServiceClient(cc grpc.ClientConnInterface) IngesterServiceClient {
	return &ingesterServiceClient{cc}
}

func (c *ingesterServiceClient) StreamOperations(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[OperationRequest, OperationResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IngesterService_ServiceDesc.Streams[0], IngesterService_StreamOperations_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[OperationRequest, OperationResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IngesterService_StreamOperationsClient = grpc.BidiStreamingClient[OperationRequest, OperationResponse]

func (c *ingesterServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, IngesterService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngesterServiceServer is the server API for IngesterService service.
// All implementations must embed UnimplementedIngesterServiceServer
// for forward compatibility.
//
// IngesterService handles streaming operations from the backfiller relay
// This provides filtered, pre-processed operations rather than raw commits
type IngesterServiceServer interface {
	// StreamOperations creates a bidirectional stream for continuous operation processing
	// The relay sends individual operations, the ingester responds with acknowledgments
	StreamOperations(grpc.BidiStreamingServer[OperationRequest, OperationResponse]) error
	// HealthCheck verifies the ingester is running and ready to accept operations
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedIngesterServiceServer()
}

// UnimplementedIngesterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIngesterServiceServer struct{}

func (UnimplementedIngesterServiceServer) StreamOperations(grpc.BidiStreamingServer[OperationRequest, OperationResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamOperations not implemented")
}
func (UnimplementedIngesterServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedIngesterServiceServer) mustEmbedUnimplementedIngesterServiceServer() {}
func (UnimplementedIngesterServiceServer) testEmbeddedByValue()                         {}

// UnsafeIngesterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngesterServiceServer will
// result in compilation errors.
type UnsafeIngesterServiceServer interface {
	mustEmbedUnimplementedIngesterServiceServer()
}

func RegisterIngesterServiceServer(s grpc.ServiceRegistrar, srv IngesterServiceServer) {
	// If the following call pancis, it indicates UnimplementedIngesterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IngesterService_ServiceDesc, srv)
}

func _IngesterService_StreamOperations_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IngesterServiceServer).StreamOperations(&grpc.GenericServerStream[OperationRequest, OperationResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IngesterService_StreamOperationsServer = grpc.BidiStreamingServer[OperationRequest, OperationResponse]

func _IngesterService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngesterServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngesterService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngesterServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IngesterService_ServiceDesc is the grpc.ServiceDesc for IngesterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IngesterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ingester.v1.IngesterService",
	HandlerType: (*IngesterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _IngesterService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamOperations",
			Handler:       _IngesterService_StreamOperations_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/ingester.proto",
}
