version: '3.8'

services:
  # PostgreSQL for storing backfill state
  postgres:
    image: postgres:15-alpine
    container_name: relay-postgres
    environment:
      POSTGRES_USER: relay
      POSTGRES_PASSWORD: relay
      POSTGRES_DB: backfiller_relay
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U relay -d backfiller_relay"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - relay-network
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Redis cache (optional for dataplane caching)
  redis:
    image: redis:7.0-alpine
    container_name: relay-redis
    command: redis-server --save 60 1 --loglevel warning
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - relay-network

  # PostgreSQL Exporter for database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: relay-postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://relay:relay@postgres:5432/backfiller_relay?sslmode=disable"
      PG_EXPORTER_DISABLE_DEFAULT_METRICS: "false"
      PG_EXPORTER_DISABLE_SETTINGS_METRICS: "false"
      PG_EXPORTER_EXTEND_QUERY_PATH: "/queries/queries.yaml"
    volumes:
      - ./monitoring/postgres-queries.yaml:/queries/queries.yaml:ro
    ports:
      - "9187:9187"
    networks:
      - relay-network
    depends_on:
      postgres:
        condition: service_healthy

  # The relay service
  relay:
    build:
      context: .
      dockerfile: tradr-backfiller-relay/Dockerfile
    container_name: relay
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_DSN: "postgres://relay:relay@postgres:5432/backfiller_relay?sslmode=disable"
      DATABASE_MAX_OPEN_CONNS: "75"
      DATABASE_MAX_IDLE_CONNS: "50"
      FIREHOSE_HOST: "wss://bsky.network"
      NSID_FILTER: "app.bsky.feed.post,app.bsky.graph.follow,app.bsky.actor.profile"
      GRPC_SERVER_PORT: "50051"
      RELAY_NAME: "relay"
      GRPC_MAX_MESSAGE_SIZE: "10485760"
      METRICS_PORT: "9090"
    ports:
      - "9090:9090"
      - "50051:50051"
      - "6060:6060"  # pprof profiling endpoint
    volumes:
      - ./tradr-backfiller-relay/config/config.yaml:/app/config/config.yaml:ro
    networks:
      - relay-network

  # Tradr Data Plane Service
  tradr-dataplane:
    build:
      context: .  # Build from current directory (tradr-backfiller)
      dockerfile: tradr-dataplane/Dockerfile
    container_name: tradr-dataplane
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      BSKY_DATAPLANE_DB_POSTGRES_URL: "postgresql://relay:relay@postgres:5432/backfiller_relay"
      BSKY_DATAPLANE_DB_POSTGRES_SCHEMA: "tradr"
      BSKY_DATAPLANE_DB_MIGRATE: "1"
      BSKY_DATAPLANE_PORT: "3000"  # Internal port
      BSKY_DID_PLC_URL: "https://plc.directory"
      REDIS_HOST: "redis:6379"
      NODE_ENV: "development"
    ports:
      - "3001:3000"  # Map external 3001 to internal 3000 to avoid conflict with Grafana
    networks:
      - relay-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: relay-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=7d'
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - relay-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: relay-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/relay-dashboard.json
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - relay-network
    depends_on:
      - prometheus

networks:
  relay-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local